import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';
import CalendarView from '../CalendarView';
import { DiaryStatsPanel } from '../DiaryStatsPanel';
import { ViewModeSelector } from '../ViewModeSelector';
import type { CalendarDay, DiaryStats, ViewMode } from '../../types';

// „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
const mockCalendarData: CalendarDay[] = [
  {
    date: new Date('2024-01-01'),
    hasPost: true,
    postCount: 3,
    isToday: false
  },
  {
    date: new Date('2024-01-02'),
    hasPost: false,
    postCount: 0,
    isToday: true
  }
];

const mockStats: DiaryStats = {
  totalPosts: 150,
  totalDays: 45,
  currentStreak: 7,
  longestStreak: 21,
  thisMonthPosts: 25,
  averagePostsPerDay: 3.3
};

// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫„ÅÆ„É¢„ÉÉ„ÇØ
const mockWindowSize = (width: number, height: number) => {
  Object.defineProperty(window, 'innerWidth', {
    writable: true,
    configurable: true,
    value: width,
  });
  Object.defineProperty(window, 'innerHeight', {
    writable: true,
    configurable: true,
    value: height,
  });
  
  // „É™„Çµ„Ç§„Ç∫„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´
  fireEvent(window, new Event('resize'));
};

// „Ç™„É™„Ç®„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Â§âÊõ¥„ÅÆ„É¢„ÉÉ„ÇØ
const mockOrientationChange = () => {
  fireEvent(window, new Event('orientationchange'));
};

describe('„É¨„Çπ„Éù„É≥„Ç∑„Éñ„É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆ„ÉÜ„Çπ„Éà', () => {
  beforeEach(() => {
    // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫„ÇíË®≠ÂÆö
    mockWindowSize(1024, 768);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  describe('CalendarView „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
    const defaultProps = {
      year: 2024,
      month: 1,
      calendarData: mockCalendarData,
      onDateClick: vi.fn(),
      onMonthChange: vi.fn()
    };

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫„ÅßÊ≠£Â∏∏„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      mockWindowSize(1200, 800);
      render(<CalendarView {...defaultProps} />);
      
      expect(screen.getByText('2024Âπ¥ 1Êúà')).toBeInTheDocument();
      expect(screen.getByText('‰ªäÊó•')).toBeInTheDocument();
      expect(screen.getByText('ÊäïÁ®ø„ÅÇ„Çä')).toBeInTheDocument();
    });

    it('„Çø„Éñ„É¨„ÉÉ„Éà„Çµ„Ç§„Ç∫„ÅßÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåË™øÊï¥„Åï„Çå„Çã', async () => {
      mockWindowSize(800, 600);
      render(<CalendarView {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('2024Âπ¥ 1Êúà')).toBeInTheDocument();
      });
    });

    it('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫ÔºàÁ∏¶Âêë„ÅçÔºâ„ÅßÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåË™øÊï¥„Åï„Çå„Çã', async () => {
      mockWindowSize(375, 667);
      render(<CalendarView {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('2024Âπ¥ 1Êúà')).toBeInTheDocument();
      });
    });

    it('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫ÔºàÊ®™Âêë„ÅçÔºâ„ÅßÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåË™øÊï¥„Åï„Çå„Çã', async () => {
      mockWindowSize(667, 375);
      render(<CalendarView {...defaultProps} />);
      
      await waitFor(() => {
        // Ê®™Âêë„Åç„É¢„Éê„Ç§„É´„Åß„ÅØÁü≠Á∏ÆË°®Á§∫
        expect(screen.getByText('2024/1')).toBeInTheDocument();
      });
    });

    it('„Ç™„É™„Ç®„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Â§âÊõ¥„Å´ÂØæÂøú„Åô„Çã', async () => {
      mockWindowSize(375, 667);
      render(<CalendarView {...defaultProps} />);
      
      // Á∏¶Âêë„Åç„Åã„ÇâÊ®™Âêë„Åç„Å´Â§âÊõ¥
      mockWindowSize(667, 375);
      mockOrientationChange();
      
      await waitFor(() => {
        expect(screen.getByText('2024/1')).toBeInTheDocument();
      });
    });
  });

  describe('DiaryStatsPanel „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
    const defaultProps = {
      stats: mockStats,
      isLoading: false
    };

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫„ÅßÊ≠£Â∏∏„Å´Ë°®Á§∫„Åï„Çå„Çã', () => {
      mockWindowSize(1200, 800);
      render(<DiaryStatsPanel {...defaultProps} />);
      
      expect(screen.getByText('üìä Áµ±Ë®àÊÉÖÂ†±')).toBeInTheDocument();
      expect(screen.getByText('150')).toBeInTheDocument();
      expect(screen.getByText('45')).toBeInTheDocument();
    });

    it('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫„ÅßÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåË™øÊï¥„Åï„Çå„Çã', async () => {
      mockWindowSize(375, 667);
      render(<DiaryStatsPanel {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('üìä Áµ±Ë®àÊÉÖÂ†±')).toBeInTheDocument();
        expect(screen.getByText('150')).toBeInTheDocument();
      });
    });

    it('„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„Åß„É¢„Éê„Ç§„É´ÂØæÂøú„ÅÆ„Çπ„Ç±„É´„Éà„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockWindowSize(375, 667);
      render(<DiaryStatsPanel stats={mockStats} isLoading={true} />);
      
      await waitFor(() => {
        expect(screen.getByTestId('loading-skeleton')).toBeInTheDocument();
      });
    });
  });

  describe('ViewModeSelector „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
    const defaultProps = {
      currentMode: 'diary' as ViewMode,
      onModeChange: vi.fn()
    };

    it('„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫„ÅßÂÖ®„Å¶„ÅÆ„É¢„Éº„Éâ„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockWindowSize(1200, 800);
      render(<ViewModeSelector {...defaultProps} />);
      
      expect(screen.getByText('„Çø„Ç§„É†„É©„Ç§„É≥')).toBeInTheDocument();
      expect(screen.getByText('„É™„Çπ„Éà')).toBeInTheDocument();
      expect(screen.getAllByText('Êó•Ë®ò')).toHaveLength(2); // ÁèæÂú®„ÅÆ„É¢„Éº„ÉâË°®Á§∫„Å®„Éú„Çø„É≥„ÅÆ‰∏°Êñπ
      expect(screen.getByText('„Ç´„É¨„É≥„ÉÄ„Éº')).toBeInTheDocument();
    });

    it('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫ÔºàÁ∏¶Âêë„ÅçÔºâ„Åß„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockWindowSize(375, 667);
      render(<ViewModeSelector {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByLabelText('Ë°®Á§∫„É¢„Éº„ÉâÈÅ∏Êäû')).toBeInTheDocument();
      });
    });

    it('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫ÔºàÊ®™Âêë„ÅçÔºâ„ÅßÁü≠Á∏Æ„É©„Éô„É´„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockWindowSize(667, 375);
      render(<ViewModeSelector {...defaultProps} />);
      
      await waitFor(() => {
        // Ê®™Âêë„Åç„É¢„Éê„Ç§„É´„Åß„ÅØÁü≠Á∏ÆË°®Á§∫ÔºàÂÆüÈöõ„ÅÆÂÆüË£Ö„Å´Âêà„Çè„Åõ„Å¶‰øÆÊ≠£Ôºâ
        expect(screen.getByText('„Çø„Ç§')).toBeInTheDocument(); // „Çø„Ç§„É†„É©„Ç§„É≥ ‚Üí „Çø„Ç§
        expect(screen.getByText('„É™„Çπ')).toBeInTheDocument(); // „É™„Çπ„Éà ‚Üí „É™„Çπ
        expect(screen.getByText('Êó•')).toBeInTheDocument(); // Êó•Ë®ò ‚Üí Êó•
        expect(screen.getByText('„Ç´„É¨')).toBeInTheDocument(); // „Ç´„É¨„É≥„ÉÄ„Éº ‚Üí „Ç´„É¨
      });
    });

    it('„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åô„Çã', async () => {
      mockWindowSize(1200, 800);
      render(<ViewModeSelector {...defaultProps} />);
      
      const timelineButton = screen.getByLabelText('„Çø„Ç§„É†„É©„Ç§„É≥„Éì„É•„Éº„Å´Âàá„ÇäÊõø„Åà');
      fireEvent.click(timelineButton);
      
      expect(defaultProps.onModeChange).toHaveBeenCalledWith('timeline');
    });
  });

  describe('„Çø„ÉÉ„ÉÅ„Éá„Éê„Ç§„ÇπÂØæÂøú', () => {
    beforeEach(() => {
      // „Çø„ÉÉ„ÉÅ„Éá„Éê„Ç§„Çπ„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      Object.defineProperty(window, 'ontouchstart', {
        writable: true,
        configurable: true,
        value: true,
      });
      
      Object.defineProperty(navigator, 'maxTouchPoints', {
        writable: true,
        configurable: true,
        value: 5,
      });
    });

    it('„Çø„ÉÉ„ÉÅ„Éá„Éê„Ç§„Çπ„Åß„Éú„Çø„É≥„Çµ„Ç§„Ç∫„ÅåÈÅ©Âàá„Å´Ë™øÊï¥„Åï„Çå„Çã', async () => {
      mockWindowSize(375, 667);
      render(<ViewModeSelector currentMode="diary" onModeChange={vi.fn()} />);
      
      await waitFor(() => {
        const buttons = screen.getAllByRole('button');
        buttons.forEach(button => {
          expect(button).toHaveClass('touch-manipulation');
        });
      });
    });
  });

  describe('„Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫ÂØæÂøú', () => {
    it('„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫Â§âÊõ¥ÊôÇ„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
      const { rerender } = render(<CalendarView {...{
        year: 2024,
        month: 1,
        calendarData: mockCalendarData,
        onDateClick: vi.fn(),
        onMonthChange: vi.fn()
      }} />);
      
      // „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫
      mockWindowSize(1200, 800);
      rerender(<CalendarView {...{
        year: 2024,
        month: 1,
        calendarData: mockCalendarData,
        onDateClick: vi.fn(),
        onMonthChange: vi.fn()
      }} />);
      
      await waitFor(() => {
        expect(screen.getByText('2024Âπ¥ 1Êúà')).toBeInTheDocument();
      });
      
      // „É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫„Å´Â§âÊõ¥
      mockWindowSize(375, 667);
      rerender(<CalendarView {...{
        year: 2024,
        month: 1,
        calendarData: mockCalendarData,
        onDateClick: vi.fn(),
        onMonthChange: vi.fn()
      }} />);
      
      await waitFor(() => {
        expect(screen.getByText('2024Âπ¥ 1Êúà')).toBeInTheDocument();
      });
    });
  });
});